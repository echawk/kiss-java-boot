#!/bin/sh -e

# Not sure why this fixes the check for GCC, but it works...
export CC=gcc
export CXX=g++

# Busybox sha256 does not support longopts.
sed -e "s/--check/-c/g" -i Makefile.am

mkdir -p patches
for p in *.patch; do
    case $p in
        icedtea-*.patch)
            cp $p patches/
            ;;
        *.patch)
            patch -p1 < "$p"
            ;;
    esac
done

./autogen.sh

jdk_prefix=/usr/lib/jvm/java-1.8-openjdk

# Using ccache causes ICEs with pregenerated headers.
export CCACHE_DISABLE=1

export ALT_PARALLEL_COMPILE_JOBS="$(nproc)"
export HOTSPOT_BUILD_JOBS="$(nproc)"
export JAVA_HOME="/usr/lib/jvm/java-1.7-openjdk"
export PATH="$JAVA_HOME/bin:/usr/share/apache-ant/bin:$PATH"
export DISTRIBUTION_PATCHES=""

export EXTRA_CPP_FLAGS="$CXXFLAGS -std=gnu++98 -fno-delete-null-pointer-checks -fno-lifetime-dse -fno-strict-overflow"
export EXTRA_CFLAGS="$CFLAGS -std=gnu++98 -Wno-error -fno-delete-null-pointer-checks -fno-lifetime-dse -fno-strict-overflow"

for p in patches/*.patch; do
    case $p in
        patches/icedtea-*.patch)
            DISTRIBUTION_PATCHES="$DISTRIBUTION_PATCHES $p"
            ;;
    esac
done

mv openjdk-git.tar.xz\?no-extract openjdk-$2.tar.xz

arch=$(uname -m)
case $arch in
    x86_64|x86|aarch64) _jfr="--enable-jfr";;
    *)                  _jfr="--disable-jfr";;
esac

bash ./configure \
    --prefix="$jdk_prefix" \
    --sysconfdir=/etc \
    --mandir=/usr/share/man \
    --infodir=/usr/share/info \
    --localstatedir=/var \
    --disable-dependency-tracking \
    --disable-downloading \
    --disable-precompiled-headers \
    --disable-docs \
    --disable-tests \
    --disable-system-pcsc \
    --disable-system-sctp \
    --enable-headless \
    --with-parallel-jobs=$(nproc) \
    --with-jar=/usr/bin/fastjar \
    --with-curves="nist+" \
    --with-hotspot-build=default \
    --with-openjdk-src-zip=$PWD/openjdk-$2.tar.xz \
    $_jfr \
    --with-jdk-home=$JAVA_HOME

make

mkdir -p "$1/$jdk_prefix"
cp -a openjdk.build/j2sdk-image/* "$1/$jdk_prefix"
cp -a openjdk.build/include       "$1/$jdk_prefix"
rm -rf "$1/$jdk_prefix/src.zip"
